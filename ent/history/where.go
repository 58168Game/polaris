// Code generated by ent, DO NOT EDIT.

package history

import (
	"polaris/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.History {
	return predicate.History(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.History {
	return predicate.History(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldID, id))
}

// SeriesID applies equality check predicate on the "series_id" field. It's identical to SeriesIDEQ.
func SeriesID(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldSeriesID, v))
}

// EpisodeID applies equality check predicate on the "episode_id" field. It's identical to EpisodeIDEQ.
func EpisodeID(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldEpisodeID, v))
}

// SourceTitle applies equality check predicate on the "source_title" field. It's identical to SourceTitleEQ.
func SourceTitle(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldSourceTitle, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldDate, v))
}

// SeriesIDEQ applies the EQ predicate on the "series_id" field.
func SeriesIDEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldSeriesID, v))
}

// SeriesIDNEQ applies the NEQ predicate on the "series_id" field.
func SeriesIDNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldSeriesID, v))
}

// SeriesIDIn applies the In predicate on the "series_id" field.
func SeriesIDIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldSeriesID, vs...))
}

// SeriesIDNotIn applies the NotIn predicate on the "series_id" field.
func SeriesIDNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldSeriesID, vs...))
}

// SeriesIDGT applies the GT predicate on the "series_id" field.
func SeriesIDGT(v int) predicate.History {
	return predicate.History(sql.FieldGT(FieldSeriesID, v))
}

// SeriesIDGTE applies the GTE predicate on the "series_id" field.
func SeriesIDGTE(v int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldSeriesID, v))
}

// SeriesIDLT applies the LT predicate on the "series_id" field.
func SeriesIDLT(v int) predicate.History {
	return predicate.History(sql.FieldLT(FieldSeriesID, v))
}

// SeriesIDLTE applies the LTE predicate on the "series_id" field.
func SeriesIDLTE(v int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldSeriesID, v))
}

// EpisodeIDEQ applies the EQ predicate on the "episode_id" field.
func EpisodeIDEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldEpisodeID, v))
}

// EpisodeIDNEQ applies the NEQ predicate on the "episode_id" field.
func EpisodeIDNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldEpisodeID, v))
}

// EpisodeIDIn applies the In predicate on the "episode_id" field.
func EpisodeIDIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldEpisodeID, vs...))
}

// EpisodeIDNotIn applies the NotIn predicate on the "episode_id" field.
func EpisodeIDNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldEpisodeID, vs...))
}

// EpisodeIDGT applies the GT predicate on the "episode_id" field.
func EpisodeIDGT(v int) predicate.History {
	return predicate.History(sql.FieldGT(FieldEpisodeID, v))
}

// EpisodeIDGTE applies the GTE predicate on the "episode_id" field.
func EpisodeIDGTE(v int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldEpisodeID, v))
}

// EpisodeIDLT applies the LT predicate on the "episode_id" field.
func EpisodeIDLT(v int) predicate.History {
	return predicate.History(sql.FieldLT(FieldEpisodeID, v))
}

// EpisodeIDLTE applies the LTE predicate on the "episode_id" field.
func EpisodeIDLTE(v int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldEpisodeID, v))
}

// SourceTitleEQ applies the EQ predicate on the "source_title" field.
func SourceTitleEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldSourceTitle, v))
}

// SourceTitleNEQ applies the NEQ predicate on the "source_title" field.
func SourceTitleNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldSourceTitle, v))
}

// SourceTitleIn applies the In predicate on the "source_title" field.
func SourceTitleIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldSourceTitle, vs...))
}

// SourceTitleNotIn applies the NotIn predicate on the "source_title" field.
func SourceTitleNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldSourceTitle, vs...))
}

// SourceTitleGT applies the GT predicate on the "source_title" field.
func SourceTitleGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldSourceTitle, v))
}

// SourceTitleGTE applies the GTE predicate on the "source_title" field.
func SourceTitleGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldSourceTitle, v))
}

// SourceTitleLT applies the LT predicate on the "source_title" field.
func SourceTitleLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldSourceTitle, v))
}

// SourceTitleLTE applies the LTE predicate on the "source_title" field.
func SourceTitleLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldSourceTitle, v))
}

// SourceTitleContains applies the Contains predicate on the "source_title" field.
func SourceTitleContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldSourceTitle, v))
}

// SourceTitleHasPrefix applies the HasPrefix predicate on the "source_title" field.
func SourceTitleHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldSourceTitle, v))
}

// SourceTitleHasSuffix applies the HasSuffix predicate on the "source_title" field.
func SourceTitleHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldSourceTitle, v))
}

// SourceTitleEqualFold applies the EqualFold predicate on the "source_title" field.
func SourceTitleEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldSourceTitle, v))
}

// SourceTitleContainsFold applies the ContainsFold predicate on the "source_title" field.
func SourceTitleContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldSourceTitle, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History) predicate.History {
	return predicate.History(sql.NotPredicates(p))
}
