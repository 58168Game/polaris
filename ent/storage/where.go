// Code generated by ent, DO NOT EDIT.

package storage

import (
	"polaris/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldName, v))
}

// Implementation applies equality check predicate on the "implementation" field. It's identical to ImplementationEQ.
func Implementation(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldImplementation, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPath, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldUser, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPassword, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDeleted, v))
}

// Default applies equality check predicate on the "default" field. It's identical to DefaultEQ.
func Default(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDefault, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldName, v))
}

// ImplementationEQ applies the EQ predicate on the "implementation" field.
func ImplementationEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldImplementation, v))
}

// ImplementationNEQ applies the NEQ predicate on the "implementation" field.
func ImplementationNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldImplementation, v))
}

// ImplementationIn applies the In predicate on the "implementation" field.
func ImplementationIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldImplementation, vs...))
}

// ImplementationNotIn applies the NotIn predicate on the "implementation" field.
func ImplementationNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldImplementation, vs...))
}

// ImplementationGT applies the GT predicate on the "implementation" field.
func ImplementationGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldImplementation, v))
}

// ImplementationGTE applies the GTE predicate on the "implementation" field.
func ImplementationGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldImplementation, v))
}

// ImplementationLT applies the LT predicate on the "implementation" field.
func ImplementationLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldImplementation, v))
}

// ImplementationLTE applies the LTE predicate on the "implementation" field.
func ImplementationLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldImplementation, v))
}

// ImplementationContains applies the Contains predicate on the "implementation" field.
func ImplementationContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldImplementation, v))
}

// ImplementationHasPrefix applies the HasPrefix predicate on the "implementation" field.
func ImplementationHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldImplementation, v))
}

// ImplementationHasSuffix applies the HasSuffix predicate on the "implementation" field.
func ImplementationHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldImplementation, v))
}

// ImplementationEqualFold applies the EqualFold predicate on the "implementation" field.
func ImplementationEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldImplementation, v))
}

// ImplementationContainsFold applies the ContainsFold predicate on the "implementation" field.
func ImplementationContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldImplementation, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldPath, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldUser, v))
}

// UserIsNil applies the IsNil predicate on the "user" field.
func UserIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldUser))
}

// UserNotNil applies the NotNil predicate on the "user" field.
func UserNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldUser))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldUser, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Storage {
	return predicate.Storage(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Storage {
	return predicate.Storage(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Storage {
	return predicate.Storage(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.Storage {
	return predicate.Storage(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.Storage {
	return predicate.Storage(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Storage {
	return predicate.Storage(sql.FieldContainsFold(FieldPassword, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldDeleted, v))
}

// DefaultEQ applies the EQ predicate on the "default" field.
func DefaultEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldEQ(FieldDefault, v))
}

// DefaultNEQ applies the NEQ predicate on the "default" field.
func DefaultNEQ(v bool) predicate.Storage {
	return predicate.Storage(sql.FieldNEQ(FieldDefault, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Storage) predicate.Storage {
	return predicate.Storage(sql.NotPredicates(p))
}
