// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"polaris/ent/series"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Series is the model entity for the Series schema.
type Series struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TmdbID holds the value of the "tmdb_id" field.
	TmdbID int `json:"tmdb_id,omitempty"`
	// ImdbID holds the value of the "imdb_id" field.
	ImdbID string `json:"imdb_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NameEn holds the value of the "name_en" field.
	NameEn string `json:"name_en,omitempty"`
	// OriginalName holds the value of the "original_name" field.
	OriginalName string `json:"original_name,omitempty"`
	// Overview holds the value of the "overview" field.
	Overview string `json:"overview,omitempty"`
	// PosterPath holds the value of the "poster_path" field.
	PosterPath string `json:"poster_path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// AirDate holds the value of the "air_date" field.
	AirDate string `json:"air_date,omitempty"`
	// Resolution holds the value of the "resolution" field.
	Resolution string `json:"resolution,omitempty"`
	// StorageID holds the value of the "storage_id" field.
	StorageID int `json:"storage_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeriesQuery when eager-loading is set.
	Edges        SeriesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SeriesEdges holds the relations/edges for other nodes in the graph.
type SeriesEdges struct {
	// Episodes holds the value of the episodes edge.
	Episodes []*Episode `json:"episodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EpisodesOrErr returns the Episodes value or an error if the edge
// was not loaded in eager-loading.
func (e SeriesEdges) EpisodesOrErr() ([]*Episode, error) {
	if e.loadedTypes[0] {
		return e.Episodes, nil
	}
	return nil, &NotLoadedError{edge: "episodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Series) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case series.FieldID, series.FieldTmdbID, series.FieldStorageID:
			values[i] = new(sql.NullInt64)
		case series.FieldImdbID, series.FieldName, series.FieldNameEn, series.FieldOriginalName, series.FieldOverview, series.FieldPosterPath, series.FieldAirDate, series.FieldResolution:
			values[i] = new(sql.NullString)
		case series.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Series fields.
func (s *Series) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case series.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case series.FieldTmdbID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tmdb_id", values[i])
			} else if value.Valid {
				s.TmdbID = int(value.Int64)
			}
		case series.FieldImdbID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imdb_id", values[i])
			} else if value.Valid {
				s.ImdbID = value.String
			}
		case series.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case series.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				s.NameEn = value.String
			}
		case series.FieldOriginalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_name", values[i])
			} else if value.Valid {
				s.OriginalName = value.String
			}
		case series.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				s.Overview = value.String
			}
		case series.FieldPosterPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field poster_path", values[i])
			} else if value.Valid {
				s.PosterPath = value.String
			}
		case series.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case series.FieldAirDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field air_date", values[i])
			} else if value.Valid {
				s.AirDate = value.String
			}
		case series.FieldResolution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolution", values[i])
			} else if value.Valid {
				s.Resolution = value.String
			}
		case series.FieldStorageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field storage_id", values[i])
			} else if value.Valid {
				s.StorageID = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Series.
// This includes values selected through modifiers, order, etc.
func (s *Series) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryEpisodes queries the "episodes" edge of the Series entity.
func (s *Series) QueryEpisodes() *EpisodeQuery {
	return NewSeriesClient(s.config).QueryEpisodes(s)
}

// Update returns a builder for updating this Series.
// Note that you need to call Series.Unwrap() before calling this method if this Series
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Series) Update() *SeriesUpdateOne {
	return NewSeriesClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Series entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Series) Unwrap() *Series {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Series is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Series) String() string {
	var builder strings.Builder
	builder.WriteString("Series(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("tmdb_id=")
	builder.WriteString(fmt.Sprintf("%v", s.TmdbID))
	builder.WriteString(", ")
	builder.WriteString("imdb_id=")
	builder.WriteString(s.ImdbID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(s.NameEn)
	builder.WriteString(", ")
	builder.WriteString("original_name=")
	builder.WriteString(s.OriginalName)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(s.Overview)
	builder.WriteString(", ")
	builder.WriteString("poster_path=")
	builder.WriteString(s.PosterPath)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("air_date=")
	builder.WriteString(s.AirDate)
	builder.WriteString(", ")
	builder.WriteString("resolution=")
	builder.WriteString(s.Resolution)
	builder.WriteString(", ")
	builder.WriteString("storage_id=")
	builder.WriteString(fmt.Sprintf("%v", s.StorageID))
	builder.WriteByte(')')
	return builder.String()
}

// SeriesSlice is a parsable slice of Series.
type SeriesSlice []*Series
