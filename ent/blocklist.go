// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"polaris/ent/blocklist"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Blocklist is the model entity for the Blocklist schema.
type Blocklist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type blocklist.Type `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value        string `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Blocklist) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blocklist.FieldID:
			values[i] = new(sql.NullInt64)
		case blocklist.FieldType, blocklist.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Blocklist fields.
func (b *Blocklist) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blocklist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case blocklist.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				b.Type = blocklist.Type(value.String)
			}
		case blocklist.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				b.Value = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Blocklist.
// This includes values selected through modifiers, order, etc.
func (b *Blocklist) GetValue(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Blocklist.
// Note that you need to call Blocklist.Unwrap() before calling this method if this Blocklist
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Blocklist) Update() *BlocklistUpdateOne {
	return NewBlocklistClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Blocklist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Blocklist) Unwrap() *Blocklist {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Blocklist is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Blocklist) String() string {
	var builder strings.Builder
	builder.WriteString("Blocklist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", b.Type))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(b.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Blocklists is a parsable slice of Blocklist.
type Blocklists []*Blocklist
