// Code generated by ent, DO NOT EDIT.

package importlist

import (
	"polaris/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ImportList {
	return predicate.ImportList(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ImportList {
	return predicate.ImportList(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ImportList {
	return predicate.ImportList(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ImportList {
	return predicate.ImportList(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ImportList {
	return predicate.ImportList(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ImportList {
	return predicate.ImportList(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ImportList {
	return predicate.ImportList(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldName, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldURL, v))
}

// Qulity applies equality check predicate on the "qulity" field. It's identical to QulityEQ.
func Qulity(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldQulity, v))
}

// StorageID applies equality check predicate on the "storage_id" field. It's identical to StorageIDEQ.
func StorageID(v int) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldStorageID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ImportList {
	return predicate.ImportList(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ImportList {
	return predicate.ImportList(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ImportList {
	return predicate.ImportList(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ImportList {
	return predicate.ImportList(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ImportList {
	return predicate.ImportList(sql.FieldNotIn(FieldType, vs...))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.ImportList {
	return predicate.ImportList(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.ImportList {
	return predicate.ImportList(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.ImportList {
	return predicate.ImportList(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.ImportList {
	return predicate.ImportList(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldContainsFold(FieldURL, v))
}

// QulityEQ applies the EQ predicate on the "qulity" field.
func QulityEQ(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldQulity, v))
}

// QulityNEQ applies the NEQ predicate on the "qulity" field.
func QulityNEQ(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldNEQ(FieldQulity, v))
}

// QulityIn applies the In predicate on the "qulity" field.
func QulityIn(vs ...string) predicate.ImportList {
	return predicate.ImportList(sql.FieldIn(FieldQulity, vs...))
}

// QulityNotIn applies the NotIn predicate on the "qulity" field.
func QulityNotIn(vs ...string) predicate.ImportList {
	return predicate.ImportList(sql.FieldNotIn(FieldQulity, vs...))
}

// QulityGT applies the GT predicate on the "qulity" field.
func QulityGT(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldGT(FieldQulity, v))
}

// QulityGTE applies the GTE predicate on the "qulity" field.
func QulityGTE(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldGTE(FieldQulity, v))
}

// QulityLT applies the LT predicate on the "qulity" field.
func QulityLT(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldLT(FieldQulity, v))
}

// QulityLTE applies the LTE predicate on the "qulity" field.
func QulityLTE(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldLTE(FieldQulity, v))
}

// QulityContains applies the Contains predicate on the "qulity" field.
func QulityContains(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldContains(FieldQulity, v))
}

// QulityHasPrefix applies the HasPrefix predicate on the "qulity" field.
func QulityHasPrefix(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldHasPrefix(FieldQulity, v))
}

// QulityHasSuffix applies the HasSuffix predicate on the "qulity" field.
func QulityHasSuffix(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldHasSuffix(FieldQulity, v))
}

// QulityEqualFold applies the EqualFold predicate on the "qulity" field.
func QulityEqualFold(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldEqualFold(FieldQulity, v))
}

// QulityContainsFold applies the ContainsFold predicate on the "qulity" field.
func QulityContainsFold(v string) predicate.ImportList {
	return predicate.ImportList(sql.FieldContainsFold(FieldQulity, v))
}

// StorageIDEQ applies the EQ predicate on the "storage_id" field.
func StorageIDEQ(v int) predicate.ImportList {
	return predicate.ImportList(sql.FieldEQ(FieldStorageID, v))
}

// StorageIDNEQ applies the NEQ predicate on the "storage_id" field.
func StorageIDNEQ(v int) predicate.ImportList {
	return predicate.ImportList(sql.FieldNEQ(FieldStorageID, v))
}

// StorageIDIn applies the In predicate on the "storage_id" field.
func StorageIDIn(vs ...int) predicate.ImportList {
	return predicate.ImportList(sql.FieldIn(FieldStorageID, vs...))
}

// StorageIDNotIn applies the NotIn predicate on the "storage_id" field.
func StorageIDNotIn(vs ...int) predicate.ImportList {
	return predicate.ImportList(sql.FieldNotIn(FieldStorageID, vs...))
}

// StorageIDGT applies the GT predicate on the "storage_id" field.
func StorageIDGT(v int) predicate.ImportList {
	return predicate.ImportList(sql.FieldGT(FieldStorageID, v))
}

// StorageIDGTE applies the GTE predicate on the "storage_id" field.
func StorageIDGTE(v int) predicate.ImportList {
	return predicate.ImportList(sql.FieldGTE(FieldStorageID, v))
}

// StorageIDLT applies the LT predicate on the "storage_id" field.
func StorageIDLT(v int) predicate.ImportList {
	return predicate.ImportList(sql.FieldLT(FieldStorageID, v))
}

// StorageIDLTE applies the LTE predicate on the "storage_id" field.
func StorageIDLTE(v int) predicate.ImportList {
	return predicate.ImportList(sql.FieldLTE(FieldStorageID, v))
}

// SettingsIsNil applies the IsNil predicate on the "settings" field.
func SettingsIsNil() predicate.ImportList {
	return predicate.ImportList(sql.FieldIsNull(FieldSettings))
}

// SettingsNotNil applies the NotNil predicate on the "settings" field.
func SettingsNotNil() predicate.ImportList {
	return predicate.ImportList(sql.FieldNotNull(FieldSettings))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ImportList) predicate.ImportList {
	return predicate.ImportList(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ImportList) predicate.ImportList {
	return predicate.ImportList(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ImportList) predicate.ImportList {
	return predicate.ImportList(sql.NotPredicates(p))
}
