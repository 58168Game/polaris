// Code generated by ent, DO NOT EDIT.

package series

import (
	"polaris/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldID, id))
}

// TmdbID applies equality check predicate on the "tmdb_id" field. It's identical to TmdbIDEQ.
func TmdbID(v int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTmdbID, v))
}

// ImdbID applies equality check predicate on the "imdb_id" field. It's identical to ImdbIDEQ.
func ImdbID(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldImdbID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldName, v))
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldNameEn, v))
}

// OriginalName applies equality check predicate on the "original_name" field. It's identical to OriginalNameEQ.
func OriginalName(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldOriginalName, v))
}

// Overview applies equality check predicate on the "overview" field. It's identical to OverviewEQ.
func Overview(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldOverview, v))
}

// PosterPath applies equality check predicate on the "poster_path" field. It's identical to PosterPathEQ.
func PosterPath(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldPosterPath, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldCreatedAt, v))
}

// AirDate applies equality check predicate on the "air_date" field. It's identical to AirDateEQ.
func AirDate(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldAirDate, v))
}

// Resolution applies equality check predicate on the "resolution" field. It's identical to ResolutionEQ.
func Resolution(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldResolution, v))
}

// StorageID applies equality check predicate on the "storage_id" field. It's identical to StorageIDEQ.
func StorageID(v int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldStorageID, v))
}

// TmdbIDEQ applies the EQ predicate on the "tmdb_id" field.
func TmdbIDEQ(v int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldTmdbID, v))
}

// TmdbIDNEQ applies the NEQ predicate on the "tmdb_id" field.
func TmdbIDNEQ(v int) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldTmdbID, v))
}

// TmdbIDIn applies the In predicate on the "tmdb_id" field.
func TmdbIDIn(vs ...int) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldTmdbID, vs...))
}

// TmdbIDNotIn applies the NotIn predicate on the "tmdb_id" field.
func TmdbIDNotIn(vs ...int) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldTmdbID, vs...))
}

// TmdbIDGT applies the GT predicate on the "tmdb_id" field.
func TmdbIDGT(v int) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldTmdbID, v))
}

// TmdbIDGTE applies the GTE predicate on the "tmdb_id" field.
func TmdbIDGTE(v int) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldTmdbID, v))
}

// TmdbIDLT applies the LT predicate on the "tmdb_id" field.
func TmdbIDLT(v int) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldTmdbID, v))
}

// TmdbIDLTE applies the LTE predicate on the "tmdb_id" field.
func TmdbIDLTE(v int) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldTmdbID, v))
}

// ImdbIDEQ applies the EQ predicate on the "imdb_id" field.
func ImdbIDEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldImdbID, v))
}

// ImdbIDNEQ applies the NEQ predicate on the "imdb_id" field.
func ImdbIDNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldImdbID, v))
}

// ImdbIDIn applies the In predicate on the "imdb_id" field.
func ImdbIDIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldImdbID, vs...))
}

// ImdbIDNotIn applies the NotIn predicate on the "imdb_id" field.
func ImdbIDNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldImdbID, vs...))
}

// ImdbIDGT applies the GT predicate on the "imdb_id" field.
func ImdbIDGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldImdbID, v))
}

// ImdbIDGTE applies the GTE predicate on the "imdb_id" field.
func ImdbIDGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldImdbID, v))
}

// ImdbIDLT applies the LT predicate on the "imdb_id" field.
func ImdbIDLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldImdbID, v))
}

// ImdbIDLTE applies the LTE predicate on the "imdb_id" field.
func ImdbIDLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldImdbID, v))
}

// ImdbIDContains applies the Contains predicate on the "imdb_id" field.
func ImdbIDContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldImdbID, v))
}

// ImdbIDHasPrefix applies the HasPrefix predicate on the "imdb_id" field.
func ImdbIDHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldImdbID, v))
}

// ImdbIDHasSuffix applies the HasSuffix predicate on the "imdb_id" field.
func ImdbIDHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldImdbID, v))
}

// ImdbIDIsNil applies the IsNil predicate on the "imdb_id" field.
func ImdbIDIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldImdbID))
}

// ImdbIDNotNil applies the NotNil predicate on the "imdb_id" field.
func ImdbIDNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldImdbID))
}

// ImdbIDEqualFold applies the EqualFold predicate on the "imdb_id" field.
func ImdbIDEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldImdbID, v))
}

// ImdbIDContainsFold applies the ContainsFold predicate on the "imdb_id" field.
func ImdbIDContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldImdbID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldName, v))
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldNameEn, v))
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldNameEn, v))
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldNameEn, vs...))
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldNameEn, vs...))
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldNameEn, v))
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldNameEn, v))
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldNameEn, v))
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldNameEn, v))
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldNameEn, v))
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldNameEn, v))
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldNameEn, v))
}

// NameEnIsNil applies the IsNil predicate on the "name_en" field.
func NameEnIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldNameEn))
}

// NameEnNotNil applies the NotNil predicate on the "name_en" field.
func NameEnNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldNameEn))
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldNameEn, v))
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldNameEn, v))
}

// OriginalNameEQ applies the EQ predicate on the "original_name" field.
func OriginalNameEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldOriginalName, v))
}

// OriginalNameNEQ applies the NEQ predicate on the "original_name" field.
func OriginalNameNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldOriginalName, v))
}

// OriginalNameIn applies the In predicate on the "original_name" field.
func OriginalNameIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldOriginalName, vs...))
}

// OriginalNameNotIn applies the NotIn predicate on the "original_name" field.
func OriginalNameNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldOriginalName, vs...))
}

// OriginalNameGT applies the GT predicate on the "original_name" field.
func OriginalNameGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldOriginalName, v))
}

// OriginalNameGTE applies the GTE predicate on the "original_name" field.
func OriginalNameGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldOriginalName, v))
}

// OriginalNameLT applies the LT predicate on the "original_name" field.
func OriginalNameLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldOriginalName, v))
}

// OriginalNameLTE applies the LTE predicate on the "original_name" field.
func OriginalNameLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldOriginalName, v))
}

// OriginalNameContains applies the Contains predicate on the "original_name" field.
func OriginalNameContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldOriginalName, v))
}

// OriginalNameHasPrefix applies the HasPrefix predicate on the "original_name" field.
func OriginalNameHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldOriginalName, v))
}

// OriginalNameHasSuffix applies the HasSuffix predicate on the "original_name" field.
func OriginalNameHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldOriginalName, v))
}

// OriginalNameEqualFold applies the EqualFold predicate on the "original_name" field.
func OriginalNameEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldOriginalName, v))
}

// OriginalNameContainsFold applies the ContainsFold predicate on the "original_name" field.
func OriginalNameContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldOriginalName, v))
}

// OverviewEQ applies the EQ predicate on the "overview" field.
func OverviewEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldOverview, v))
}

// OverviewNEQ applies the NEQ predicate on the "overview" field.
func OverviewNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldOverview, v))
}

// OverviewIn applies the In predicate on the "overview" field.
func OverviewIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldOverview, vs...))
}

// OverviewNotIn applies the NotIn predicate on the "overview" field.
func OverviewNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldOverview, vs...))
}

// OverviewGT applies the GT predicate on the "overview" field.
func OverviewGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldOverview, v))
}

// OverviewGTE applies the GTE predicate on the "overview" field.
func OverviewGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldOverview, v))
}

// OverviewLT applies the LT predicate on the "overview" field.
func OverviewLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldOverview, v))
}

// OverviewLTE applies the LTE predicate on the "overview" field.
func OverviewLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldOverview, v))
}

// OverviewContains applies the Contains predicate on the "overview" field.
func OverviewContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldOverview, v))
}

// OverviewHasPrefix applies the HasPrefix predicate on the "overview" field.
func OverviewHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldOverview, v))
}

// OverviewHasSuffix applies the HasSuffix predicate on the "overview" field.
func OverviewHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldOverview, v))
}

// OverviewEqualFold applies the EqualFold predicate on the "overview" field.
func OverviewEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldOverview, v))
}

// OverviewContainsFold applies the ContainsFold predicate on the "overview" field.
func OverviewContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldOverview, v))
}

// PosterPathEQ applies the EQ predicate on the "poster_path" field.
func PosterPathEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldPosterPath, v))
}

// PosterPathNEQ applies the NEQ predicate on the "poster_path" field.
func PosterPathNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldPosterPath, v))
}

// PosterPathIn applies the In predicate on the "poster_path" field.
func PosterPathIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldPosterPath, vs...))
}

// PosterPathNotIn applies the NotIn predicate on the "poster_path" field.
func PosterPathNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldPosterPath, vs...))
}

// PosterPathGT applies the GT predicate on the "poster_path" field.
func PosterPathGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldPosterPath, v))
}

// PosterPathGTE applies the GTE predicate on the "poster_path" field.
func PosterPathGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldPosterPath, v))
}

// PosterPathLT applies the LT predicate on the "poster_path" field.
func PosterPathLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldPosterPath, v))
}

// PosterPathLTE applies the LTE predicate on the "poster_path" field.
func PosterPathLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldPosterPath, v))
}

// PosterPathContains applies the Contains predicate on the "poster_path" field.
func PosterPathContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldPosterPath, v))
}

// PosterPathHasPrefix applies the HasPrefix predicate on the "poster_path" field.
func PosterPathHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldPosterPath, v))
}

// PosterPathHasSuffix applies the HasSuffix predicate on the "poster_path" field.
func PosterPathHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldPosterPath, v))
}

// PosterPathIsNil applies the IsNil predicate on the "poster_path" field.
func PosterPathIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldPosterPath))
}

// PosterPathNotNil applies the NotNil predicate on the "poster_path" field.
func PosterPathNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldPosterPath))
}

// PosterPathEqualFold applies the EqualFold predicate on the "poster_path" field.
func PosterPathEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldPosterPath, v))
}

// PosterPathContainsFold applies the ContainsFold predicate on the "poster_path" field.
func PosterPathContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldPosterPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldCreatedAt, v))
}

// AirDateEQ applies the EQ predicate on the "air_date" field.
func AirDateEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldAirDate, v))
}

// AirDateNEQ applies the NEQ predicate on the "air_date" field.
func AirDateNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldAirDate, v))
}

// AirDateIn applies the In predicate on the "air_date" field.
func AirDateIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldAirDate, vs...))
}

// AirDateNotIn applies the NotIn predicate on the "air_date" field.
func AirDateNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldAirDate, vs...))
}

// AirDateGT applies the GT predicate on the "air_date" field.
func AirDateGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldAirDate, v))
}

// AirDateGTE applies the GTE predicate on the "air_date" field.
func AirDateGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldAirDate, v))
}

// AirDateLT applies the LT predicate on the "air_date" field.
func AirDateLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldAirDate, v))
}

// AirDateLTE applies the LTE predicate on the "air_date" field.
func AirDateLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldAirDate, v))
}

// AirDateContains applies the Contains predicate on the "air_date" field.
func AirDateContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldAirDate, v))
}

// AirDateHasPrefix applies the HasPrefix predicate on the "air_date" field.
func AirDateHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldAirDate, v))
}

// AirDateHasSuffix applies the HasSuffix predicate on the "air_date" field.
func AirDateHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldAirDate, v))
}

// AirDateEqualFold applies the EqualFold predicate on the "air_date" field.
func AirDateEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldAirDate, v))
}

// AirDateContainsFold applies the ContainsFold predicate on the "air_date" field.
func AirDateContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldAirDate, v))
}

// ResolutionEQ applies the EQ predicate on the "resolution" field.
func ResolutionEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldResolution, v))
}

// ResolutionNEQ applies the NEQ predicate on the "resolution" field.
func ResolutionNEQ(v string) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldResolution, v))
}

// ResolutionIn applies the In predicate on the "resolution" field.
func ResolutionIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldResolution, vs...))
}

// ResolutionNotIn applies the NotIn predicate on the "resolution" field.
func ResolutionNotIn(vs ...string) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldResolution, vs...))
}

// ResolutionGT applies the GT predicate on the "resolution" field.
func ResolutionGT(v string) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldResolution, v))
}

// ResolutionGTE applies the GTE predicate on the "resolution" field.
func ResolutionGTE(v string) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldResolution, v))
}

// ResolutionLT applies the LT predicate on the "resolution" field.
func ResolutionLT(v string) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldResolution, v))
}

// ResolutionLTE applies the LTE predicate on the "resolution" field.
func ResolutionLTE(v string) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldResolution, v))
}

// ResolutionContains applies the Contains predicate on the "resolution" field.
func ResolutionContains(v string) predicate.Series {
	return predicate.Series(sql.FieldContains(FieldResolution, v))
}

// ResolutionHasPrefix applies the HasPrefix predicate on the "resolution" field.
func ResolutionHasPrefix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasPrefix(FieldResolution, v))
}

// ResolutionHasSuffix applies the HasSuffix predicate on the "resolution" field.
func ResolutionHasSuffix(v string) predicate.Series {
	return predicate.Series(sql.FieldHasSuffix(FieldResolution, v))
}

// ResolutionEqualFold applies the EqualFold predicate on the "resolution" field.
func ResolutionEqualFold(v string) predicate.Series {
	return predicate.Series(sql.FieldEqualFold(FieldResolution, v))
}

// ResolutionContainsFold applies the ContainsFold predicate on the "resolution" field.
func ResolutionContainsFold(v string) predicate.Series {
	return predicate.Series(sql.FieldContainsFold(FieldResolution, v))
}

// StorageIDEQ applies the EQ predicate on the "storage_id" field.
func StorageIDEQ(v int) predicate.Series {
	return predicate.Series(sql.FieldEQ(FieldStorageID, v))
}

// StorageIDNEQ applies the NEQ predicate on the "storage_id" field.
func StorageIDNEQ(v int) predicate.Series {
	return predicate.Series(sql.FieldNEQ(FieldStorageID, v))
}

// StorageIDIn applies the In predicate on the "storage_id" field.
func StorageIDIn(vs ...int) predicate.Series {
	return predicate.Series(sql.FieldIn(FieldStorageID, vs...))
}

// StorageIDNotIn applies the NotIn predicate on the "storage_id" field.
func StorageIDNotIn(vs ...int) predicate.Series {
	return predicate.Series(sql.FieldNotIn(FieldStorageID, vs...))
}

// StorageIDGT applies the GT predicate on the "storage_id" field.
func StorageIDGT(v int) predicate.Series {
	return predicate.Series(sql.FieldGT(FieldStorageID, v))
}

// StorageIDGTE applies the GTE predicate on the "storage_id" field.
func StorageIDGTE(v int) predicate.Series {
	return predicate.Series(sql.FieldGTE(FieldStorageID, v))
}

// StorageIDLT applies the LT predicate on the "storage_id" field.
func StorageIDLT(v int) predicate.Series {
	return predicate.Series(sql.FieldLT(FieldStorageID, v))
}

// StorageIDLTE applies the LTE predicate on the "storage_id" field.
func StorageIDLTE(v int) predicate.Series {
	return predicate.Series(sql.FieldLTE(FieldStorageID, v))
}

// StorageIDIsNil applies the IsNil predicate on the "storage_id" field.
func StorageIDIsNil() predicate.Series {
	return predicate.Series(sql.FieldIsNull(FieldStorageID))
}

// StorageIDNotNil applies the NotNil predicate on the "storage_id" field.
func StorageIDNotNil() predicate.Series {
	return predicate.Series(sql.FieldNotNull(FieldStorageID))
}

// HasEpisodes applies the HasEdge predicate on the "episodes" edge.
func HasEpisodes() predicate.Series {
	return predicate.Series(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpisodesWith applies the HasEdge predicate on the "episodes" edge with a given conditions (other predicates).
func HasEpisodesWith(preds ...predicate.Episode) predicate.Series {
	return predicate.Series(func(s *sql.Selector) {
		step := newEpisodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Series) predicate.Series {
	return predicate.Series(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Series) predicate.Series {
	return predicate.Series(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Series) predicate.Series {
	return predicate.Series(sql.NotPredicates(p))
}
