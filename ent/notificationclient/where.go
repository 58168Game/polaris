// Code generated by ent, DO NOT EDIT.

package notificationclient

import (
	"polaris/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldName, v))
}

// Service applies equality check predicate on the "service" field. It's identical to ServiceEQ.
func Service(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldService, v))
}

// Settings applies equality check predicate on the "settings" field. It's identical to SettingsEQ.
func Settings(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldSettings, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldEnabled, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldContainsFold(FieldName, v))
}

// ServiceEQ applies the EQ predicate on the "service" field.
func ServiceEQ(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldService, v))
}

// ServiceNEQ applies the NEQ predicate on the "service" field.
func ServiceNEQ(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNEQ(FieldService, v))
}

// ServiceIn applies the In predicate on the "service" field.
func ServiceIn(vs ...string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldIn(FieldService, vs...))
}

// ServiceNotIn applies the NotIn predicate on the "service" field.
func ServiceNotIn(vs ...string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNotIn(FieldService, vs...))
}

// ServiceGT applies the GT predicate on the "service" field.
func ServiceGT(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGT(FieldService, v))
}

// ServiceGTE applies the GTE predicate on the "service" field.
func ServiceGTE(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGTE(FieldService, v))
}

// ServiceLT applies the LT predicate on the "service" field.
func ServiceLT(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLT(FieldService, v))
}

// ServiceLTE applies the LTE predicate on the "service" field.
func ServiceLTE(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLTE(FieldService, v))
}

// ServiceContains applies the Contains predicate on the "service" field.
func ServiceContains(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldContains(FieldService, v))
}

// ServiceHasPrefix applies the HasPrefix predicate on the "service" field.
func ServiceHasPrefix(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldHasPrefix(FieldService, v))
}

// ServiceHasSuffix applies the HasSuffix predicate on the "service" field.
func ServiceHasSuffix(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldHasSuffix(FieldService, v))
}

// ServiceEqualFold applies the EqualFold predicate on the "service" field.
func ServiceEqualFold(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEqualFold(FieldService, v))
}

// ServiceContainsFold applies the ContainsFold predicate on the "service" field.
func ServiceContainsFold(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldContainsFold(FieldService, v))
}

// SettingsEQ applies the EQ predicate on the "settings" field.
func SettingsEQ(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldSettings, v))
}

// SettingsNEQ applies the NEQ predicate on the "settings" field.
func SettingsNEQ(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNEQ(FieldSettings, v))
}

// SettingsIn applies the In predicate on the "settings" field.
func SettingsIn(vs ...string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldIn(FieldSettings, vs...))
}

// SettingsNotIn applies the NotIn predicate on the "settings" field.
func SettingsNotIn(vs ...string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNotIn(FieldSettings, vs...))
}

// SettingsGT applies the GT predicate on the "settings" field.
func SettingsGT(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGT(FieldSettings, v))
}

// SettingsGTE applies the GTE predicate on the "settings" field.
func SettingsGTE(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldGTE(FieldSettings, v))
}

// SettingsLT applies the LT predicate on the "settings" field.
func SettingsLT(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLT(FieldSettings, v))
}

// SettingsLTE applies the LTE predicate on the "settings" field.
func SettingsLTE(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldLTE(FieldSettings, v))
}

// SettingsContains applies the Contains predicate on the "settings" field.
func SettingsContains(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldContains(FieldSettings, v))
}

// SettingsHasPrefix applies the HasPrefix predicate on the "settings" field.
func SettingsHasPrefix(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldHasPrefix(FieldSettings, v))
}

// SettingsHasSuffix applies the HasSuffix predicate on the "settings" field.
func SettingsHasSuffix(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldHasSuffix(FieldSettings, v))
}

// SettingsEqualFold applies the EqualFold predicate on the "settings" field.
func SettingsEqualFold(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEqualFold(FieldSettings, v))
}

// SettingsContainsFold applies the ContainsFold predicate on the "settings" field.
func SettingsContainsFold(v string) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldContainsFold(FieldSettings, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.NotificationClient {
	return predicate.NotificationClient(sql.FieldNEQ(FieldEnabled, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationClient) predicate.NotificationClient {
	return predicate.NotificationClient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationClient) predicate.NotificationClient {
	return predicate.NotificationClient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationClient) predicate.NotificationClient {
	return predicate.NotificationClient(sql.NotPredicates(p))
}
